/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package csci2320;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.function.BiPredicate;
import java.util.function.Supplier;

public class App {
    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            String testType = sc.next();
            if (testType.equals("speed")) {
                speed(1000000);
                return;
            }
            Random rand = new Random(sc.nextLong());
            int size1 = sc.nextInt();
            int size2 = sc.nextInt();
            switch(testType) {
                case "heap":
                    heap(rand, size1);
                    heap(rand, size2);
                    break;
                case "klargest":
                    kLargest(rand, size1, sc.nextInt());
                    kLargest(rand, size2, sc.nextInt());
                    kLargest(rand, size2 * 10, sc.nextInt());
                    break;
            }
        }
    }

    static String randomString(Random rand, int len) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; ++i) {
            sb.append((char)('a'+rand.nextInt(26)));
        }
        return sb.toString();
    }

    private static <E> void testHeap(int size, Supplier<E> gen, BiPredicate<E, E> hp, Comparator<E> comp) {
        PriorityQueue<E> heap = new BinaryHeap<>(hp);
        var values = new ArrayList<E>(size);
        for (int i = 0; i < size; ++i) {
            var v = gen.get();
            heap.enqueue(v);
            values.add(v);
        }
        Collections.sort(values, comp);
        if (heap.isEmpty()) {
            System.out.println("Empty heap after pushing.");
        }
        for (int i = 0; i < size; ++i) {
            E v = values.get(i);
            if (!heap.peek().equals(v)) {
                System.out.println("Bad peek: " + i + " " + v);
            }
            if (!heap.dequeue().equals(v)) {
                System.out.println("Bad dequeue: " + i + " " + v);
            }
        }
    }

    public static void heap(Random rand, int size) {
        System.out.println("Heap test with " + size);
        testHeap(size, () -> rand.nextDouble(), (x, y) -> x > y, (x, y) -> -Double.compare(x, y));
        testHeap(size, () -> rand.nextDouble(), (x, y) -> x < y, (x, y) -> Double.compare(x, y));
        testHeap(size, () -> randomString(rand, 8), (x, y) -> x.compareTo(y) < 0, (x, y) -> x.compareTo(y));
        System.out.println("Heap test completed.");
    }

    public static void kLargest(Random rand, int size, int k) {
        List<Double> nums = new ArrayList<>(size);
        for (int i = 0; i < size; ++i) {
            nums.add(rand.nextDouble());
        }
        var largest = KLargest.findKLargest(nums, k, (x, y) -> x < y);
        System.out.printf("Them %1.4f\n", largest.stream().reduce((x, y) -> x + y).get());
        Collections.sort(nums, (x, y) -> -Double.compare(x, y));
        var realLargest = new HashSet<Double>(nums.subList(0, k));
        System.out.printf("True %1.4f\n", realLargest.stream().reduce((x, y) -> x + y).get());
        if (largest.size() != realLargest.size()) {
            System.out.println("Sizes don't match: " + largest.size() + " " + realLargest.size());
        }
        if (!largest.equals(realLargest)) {
            System.out.println("The largest elements don't match expectation.");
        }
        System.out.println("K-largest test completed.");
    }

    static void speed(int size) {
        var start = System.nanoTime();
        Random rand = new Random(48283);

        heap(rand, size);
        System.out.println("Basic time: " + (System.nanoTime() - start)*1e-9);
        kLargest(rand, size, size / 10);
        System.out.println("Final time: " + (System.nanoTime() - start)*1e-9);
    }
}
